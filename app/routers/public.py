# app/routers/public.py

import json

from fastapi import APIRouter, Request, Depends,HTTPException, File, UploadFile, Form
from fastapi.responses import HTMLResponse, RedirectResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from typing import Optional,Dict

from sqlalchemy.orm import Session

import os
from app.database import get_db
from app.services.auth import get_current_user
from app.models.order import Order
from app.models.user import User
from app.schemas.user import UserOut

# ‡πÄ‡∏û‡∏¥‡πà‡∏° Jinja2 Templates
templates = Jinja2Templates(directory="app/templates")

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏•‡∏¥‡∏õ
UPLOAD_DIR = "uploads/payment_slips"
os.makedirs(UPLOAD_DIR, exist_ok=True)

router = APIRouter(tags=["HTML"])


@router.get("/", response_class=HTMLResponse)
def get_homepage(
    request: Request,
    current_user: Optional[UserOut] = Depends(get_current_user)
):
    """
    ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    """
    # print(f"üè† Current User: {current_user}")
    return templates.TemplateResponse(
        "home.html", 
        {"request": request, "current_user": current_user}
    )
    

@router.get("/favicon.ico", include_in_schema=False)
async def favicon():
    return RedirectResponse(url="/static/favicon.ico")

@router.get("/cart", response_class=HTMLResponse)
def get_cart_page(
    request: Request,
    current_user: Optional[UserOut] = Depends(get_current_user)
):
    """
    ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    """
    return templates.TemplateResponse(
        "cart.html", 
        {"request": request, "current_user": current_user}
    )

@router.post("/checkout", response_class=JSONResponse)
async def checkout(
    cart: str = Form(...),  # ‡∏£‡∏±‡∏ö cart ‡πÄ‡∏õ‡πá‡∏ô JSON string ‡∏à‡∏≤‡∏Å FormData
    payment_slip: UploadFile = File(...),
    fullname: str = Form(...),
    phone: str = Form(...),
    address: str = Form(...),
    province: str = Form(...),
    postal_code: str = Form(...),
    db: Session = Depends(get_db),
    current_user: Optional[UserOut] = Depends(get_current_user)
):
    """
    ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    """
    if not current_user:
        raise HTTPException(status_code=401, detail="‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠")

    try:
        cart_data = json.loads(cart)
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÑ‡∏î‡πâ: {str(e)}")

    if not cart_data.get('cart') or cart_data.get('cart_total') == 0:
        raise HTTPException(status_code=400, detail="‚ùå ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤")

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
    if payment_slip.content_type not in ["image/jpeg", "image/png"]:
        raise HTTPException(status_code=400, detail="‚ùå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå .jpg, .jpeg ‡∏´‡∏£‡∏∑‡∏≠ .png ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")

    if payment_slip.size > 15 * 1024 * 1024:  # 15MB
        raise HTTPException(status_code=400, detail="‚ùå ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 15MB")

    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    user = db.query(User).filter(User.email == current_user.email).first()
    if user:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°
        full_address = f"{address}, {province} {postal_code}"
        user.name = fullname
        user.phone = phone
        user.address = full_address
        db.commit()

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
    slip_filename = f"{current_user.email}_{payment_slip.filename}"
    slip_path = os.path.join(UPLOAD_DIR, slip_filename)

    with open(slip_path, "wb") as buffer:
        buffer.write(await payment_slip.read())

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å JSON ‡∏î‡πâ‡∏ß‡∏¢ double quotes
    cart_json = json.dumps(cart_data['cart'], ensure_ascii=False)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà
    new_order = Order(
        email=current_user.email,
        item=cart_json,
        total=cart_data['cart_total'],
        status="pending",
        slip_path=slip_path
    )

    db.add(new_order)
    db.commit()
    db.refresh(new_order)

    print("üõí **‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**")
    print(f"üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: {current_user.email}")
    print(f"üíµ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ‡∏ø{cart_data['cart_total']}")
    print(f"üñºÔ∏è ‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: {slip_path}")

    return JSONResponse(content={
        "message": "‚úÖ ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
        "order_id": new_order.order_id,
        "user_email": current_user.email,
        "cart_total": cart_data['cart_total'],
        "slip_path": slip_path
    })

@router.get("/logout", response_class=RedirectResponse)
def logout():
    """
    ‚úÖ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á Token ‡πÉ‡∏ô Cookie
    """
    response = RedirectResponse(url="/login", status_code=303)

    # ‚úÖ ‡∏•‡∏ö Cookie ‡πÇ‡∏î‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ `domain` ‡πÅ‡∏•‡∏∞ `path` ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    response.delete_cookie(
        key="Authorization",
        path="/", 
        domain=".jintaphas.tech"  # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡πÄ‡∏ã‡πá‡∏ï Cookie
    )

    return response



@router.get("/my-orders", response_class=HTMLResponse)
def get_my_orders_page(
    request: Request,
    current_user: Optional[UserOut] = Depends(get_current_user)
):
    """
    ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô
    """
    return templates.TemplateResponse(
        "my_orders.html",
        {"request": request, "current_user": current_user}
    )
