# app/routers/packing.py

from concurrent.futures import ThreadPoolExecutor,ProcessPoolExecutor
import asyncio
import requests
from fastapi import APIRouter, Depends, UploadFile, File, HTTPException,Query,Header, Response, Request, Form, WebSocket, WebSocketDisconnect
from fastapi.responses import JSONResponse, StreamingResponse, FileResponse, HTMLResponse
from sqlalchemy import and_, or_
from sqlalchemy.orm import Session, joinedload
from app.models.user import User
from app.models.camera import Camera
from app.models.order import Order
from app.models.order_item import OrderItem
from app.models.product import Product
from app.schemas.order import VerifyRequest
from app.services.auth import get_user_with_role_and_position_and_isActive, get_current_user
from app.database import get_db
from app.services.ws_manager import notify_admin, notify_preparation
from datetime import datetime
import subprocess,json,shutil,torch,os,cv2,traceback,threading,time,re,base64
import numpy as np
from ultralytics import YOLO
from fastapi.templating import Jinja2Templates

router = APIRouter(prefix="/packing", tags=["Packing Staff"])
stream_lock = asyncio.Lock()  # Lock ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Stream

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLOv10
MODEL_PATH = "app/models/best.pt"
ONNX_MODEL_PATH = "app/models/best.onnx"
UPLOAD_DIR = "uploads/packing_images"
os.makedirs(UPLOAD_DIR, exist_ok=True)

# ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ONNX model ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
if not os.path.exists(ONNX_MODEL_PATH):
    print(f"‚ö†Ô∏è ONNX model not found at {ONNX_MODEL_PATH}")
else:
    print(f"‚úÖ ONNX model found at {ONNX_MODEL_PATH}")

# stream_lock = threading.Lock()  # Lock ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Stream

try:
    model = YOLO(MODEL_PATH)
except Exception as e:
    raise HTTPException(status_code=500, detail=f"‚ùå Failed to load YOLOv10 model: {str(e)}")

# ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î ONNX model ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô frontend
@router.get("/model")
async def get_onnx_model(
    current_user: User = Depends(get_user_with_role_and_position_and_isActive(1, 4))
):
    """
    Return the ONNX model file for frontend real-time detection
    """
    if not os.path.exists(ONNX_MODEL_PATH):
        raise HTTPException(status_code=404, detail="ONNX model not found")
    
    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ browser ‡πÅ‡∏õ‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô media_type ‡πÄ‡∏õ‡πá‡∏ô application/octet-stream
    # ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ headers ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£ transform ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    return FileResponse(
        ONNX_MODEL_PATH, 
        media_type="application/octet-stream",
        filename="best.onnx",
        headers={
            "Content-Disposition": "attachment; filename=best.onnx",
            "Content-Type": "application/octet-stream",
            "Access-Control-Allow-Origin": "*",
            "Cache-Control": "no-cache, no-store, must-revalidate",
            "Pragma": "no-cache",
            "Expires": "0"
        }
    )

# ‚úÖ ‡∏Å‡∏•‡πâ‡∏≠‡∏á IP RTSP
RTSP_LINK = None

# gst_pipeline = (
#     f"rtspsrc location={RTSP_LINK} latency=0 ! "
#     "decodebin ! videoconvert ! appsink"
# )
# video_capture = cv2.VideoCapture(gst_pipeline, cv2.CAP_GSTREAMER)

video_capture = cv2.VideoCapture(RTSP_LINK, cv2.CAP_FFMPEG)
# video_capture = cv2.VideoCapture(RTSP_LINK)
video_capture.set(cv2.CAP_PROP_BUFFERSIZE, 1)  # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î buffer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
video_capture.set(cv2.CAP_PROP_FPS, 15)  # ‡∏•‡∏î Frame Rate
video_capture.set(cv2.CAP_PROP_POS_MSEC, 5000)  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î timeout (5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)

video_captures = {}  # ‡πÉ‡∏ä‡πâ camera_id ‡πÄ‡∏õ‡πá‡∏ô key
detection_flags = {}  # ‡πÉ‡∏ä‡πâ camera_id ‡πÄ‡∏õ‡πá‡∏ô key ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
detection_processes = {}  # ‡πÄ‡∏Å‡πá‡∏ö process ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö

async def start_camera(camera_id: int, rtsp_link: str):
    global video_captures

    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô
    if camera_id in video_captures:
        video_captures[camera_id].release()
        del video_captures[camera_id]
        await asyncio.sleep(1)

    print(f"üîç ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á {camera_id} ‡∏ó‡∏µ‡πà {rtsp_link}")
    
    video_capture = cv2.VideoCapture(rtsp_link, cv2.CAP_FFMPEG)
    if not video_capture.isOpened():
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á {camera_id}")
        return False

    video_captures[camera_id] = video_capture
    print(f"‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á {camera_id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    return True

async def stop_camera(camera_id: int):
    global video_captures, detection_flags
    if camera_id in video_captures:
        print(f"üõë ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á {camera_id}")
        video_captures[camera_id].release()
        del video_captures[camera_id]
        # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢
        if camera_id in detection_flags:
            detection_flags[camera_id] = False
        await asyncio.sleep(1)
    print(f"‚úÖ ‡∏Å‡∏•‡πâ‡∏≠‡∏á {camera_id} ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏â‡∏•‡∏≤‡∏Å‡∏ö‡∏ô‡∏†‡∏≤‡∏û
def draw_detections(frame, detections):
    for detection in detections:
        label = detection["label"]
        conf = detection["confidence"]
        box = detection["box"]
        
        x1, y1, x2, y2 = [int(coord) for coord in box]
        
        # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö
        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
        
        # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏•‡∏≤‡∏Å
        y = y1 - 15 if y1 - 15 > 15 else y1 + 15
        
        # ‡∏ß‡∏≤‡∏î‡∏â‡∏•‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô
        label_text = f"{label}: {conf:.2f}"
        cv2.putText(frame, label_text, (x1, y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
    
    return frame

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ö‡∏ô frame (‡∏ô‡∏≥‡∏°‡∏≤‡∏à‡∏≤‡∏Å yolo_worker.py ‡∏ã‡∏∂‡πà‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á)
def detect_frame(frame, device='cuda:0'):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÇ‡∏î‡∏¢‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö yolo_worker.py
    """
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ frame ‡πÄ‡∏õ‡πá‡∏ô numpy array ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if frame is None or frame.size == 0:
            print("‚ùå Invalid frame for detection")
            return []
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á temp directory ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        temp_dir = "uploads/temp_realtime"
        os.makedirs(temp_dir, exist_ok=True)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
        temp_path = os.path.join(temp_dir, f"temp_frame_{time.time()}.jpg")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        cv2.imwrite(temp_path, frame)
        
        if not os.path.exists(temp_path):
            print(f"‚ùå Failed to write temporary file: {temp_path}")
            return []
            
        try:
            # ‡πÉ‡∏ä‡πâ subprocess ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å yolo_worker.py ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            result = subprocess.run(
                ["python", "app/services/yolo_worker.py", temp_path],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            if result.returncode != 0:
                print(f"‚ùå YOLO worker error in real-time: {result.stderr}")
                return []
            
            # Parse JSON output
            try:
                start_index = result.stdout.find("{")
                end_index = result.stdout.rfind("}") + 1
                if start_index == -1 or end_index == 0:
                    return []
                clean_json = result.stdout[start_index:end_index]
                output = json.loads(clean_json)
                
                # ‡πÉ‡∏ä‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏à‡∏≤‡∏Å YOLO worker
                detections = output.get("detections", [])
                
                return detections
            except json.JSONDecodeError:
                print("‚ùå Failed to decode YOLO worker response in real-time.")
                return []
                
        finally:
            # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πá‡∏ï‡∏≤‡∏°
            try:
                if os.path.exists(temp_path):
                    os.remove(temp_path)
            except Exception as e:
                print(f"‚ö†Ô∏è Warning: Failed to delete temporary file: {e}")
    except Exception as e:
        print(f"‚ùå Error in frame detection: {str(e)}")
        traceback.print_exc()
        return []

# ‚úÖ ‡πÅ‡∏Ñ‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
@router.get("/snapshot")
async def snapshot(
    camera_id: int = Query(..., description="ID ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡∏õ‡∏†‡∏≤‡∏û"),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive(1, 4))
):
    global video_captures

    if camera_id not in video_captures or not video_captures[camera_id].isOpened():
        raise HTTPException(status_code=400, detail=f"Camera {camera_id} is not opened")

    success, frame = video_captures[camera_id].read()
    if not success:
        raise HTTPException(status_code=500, detail=f"Cannot read frame from camera {camera_id}")

    # encode ‡πÄ‡∏õ‡πá‡∏ô jpg
    _, buffer = cv2.imencode('.jpg', frame)

    return Response(content=buffer.tobytes(), media_type="image/jpeg")



# ‚úÖ ‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
@router.get("/stream")
async def stream_video(
    request: Request,
    camera_id: int = Query(..., description="ID ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡∏£‡∏µ‡∏°"),
    token: str = Header(None),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive(1, 4))
):
    global video_captures

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å DB
    camera = db.query(Camera).filter(Camera.id == camera_id).first()
    if not camera:
        raise HTTPException(status_code=404, detail="Camera not found")

    rtsp_link = camera.stream_url  # ‡∏î‡∏∂‡∏á RTSP link ‡∏à‡∏≤‡∏Å DB

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if camera_id not in video_captures or not video_captures[camera_id].isOpened():
        await start_camera(camera_id, rtsp_link)

    # ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Stream
    async def generate():
        try:
            while True:
                if camera_id not in video_captures or not video_captures[camera_id].isOpened():
                    print(f"‚ö†Ô∏è ‡∏Å‡∏•‡πâ‡∏≠‡∏á {camera_id} ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î")
                    break
                success, frame = video_captures[camera_id].read()
                if not success:
                    await asyncio.sleep(0.01)
                    continue
                _, buffer = cv2.imencode('.jpg', frame)
                yield (
                    b'--frame\r\n'
                    b'Content-Type: image/jpeg\r\n\r\n' + buffer.tobytes() + b'\r\n'
                )
                await asyncio.sleep(0.01)
        except Exception as e:
            print(f"‚ùå Error streaming camera {camera_id}: {e}")
        finally:
            await stop_camera(camera_id)

    return StreamingResponse(generate(), media_type="multipart/x-mixed-replace;boundary=frame")



# ‚úÖ ‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ö‡∏ö real-time
@router.get("/realtime-detect")
async def realtime_detect(
    request: Request,
    camera_id: int = Query(..., description="ID ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö"),
    token: str = Header(None),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive(1, 4))
):
    global video_captures, detection_flags
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å DB
    camera = db.query(Camera).filter(Camera.id == camera_id).first()
    if not camera:
        raise HTTPException(status_code=404, detail="Camera not found")

    rtsp_link = camera.stream_url  # ‡∏î‡∏∂‡∏á RTSP link ‡∏à‡∏≤‡∏Å DB

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if camera_id not in video_captures or not video_captures[camera_id].isOpened():
        await start_camera(camera_id, rtsp_link)

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
    device = 'cuda:0' if torch.cuda.is_available() else 'cpu'
    print(f"üîç Running YOLO on device: {device} for camera {camera_id}")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
    detection_flags[camera_id] = True
    
    # ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Stream ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
    async def generate():
        try:
            # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ü‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß
            last_detection_time = 0
            detection_interval = 2.0  # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏∏‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (0.5 FPS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö)
            
            # ‡∏Å‡∏£‡∏≠‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÉ‡∏ä‡πâ‡∏ß‡∏≤‡∏î‡∏ö‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà)
            last_detections = []
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ device ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
            device = 'cuda:0' if torch.cuda.is_available() else 'cpu'
            print(f"üîç Running YOLO on device: {device} for camera {camera_id}")
            
            while detection_flags.get(camera_id, True):
                if camera_id not in video_captures or not video_captures[camera_id].isOpened():
                    print(f"‚ö†Ô∏è ‡∏Å‡∏•‡πâ‡∏≠‡∏á {camera_id} ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î")
                    break
                    
                success, frame = video_captures[camera_id].read()
                if not success:
                    await asyncio.sleep(0.01)  # ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÄ‡∏õ‡πá‡∏ô 0.01 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                    continue
                
                current_time = time.time()
                should_detect = (current_time - last_detection_time) >= detection_interval
                
                if should_detect:
                    last_detection_time = current_time
                    
                    try:
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ü‡∏£‡∏°
                        if frame is None or not isinstance(frame, np.ndarray) or frame.size == 0:
                            print(f"‚ö†Ô∏è Invalid frame received from camera {camera_id}")
                            await asyncio.sleep(0.01)
                            continue
                        
                        try:
                            # ‡∏ó‡∏≥‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡πÄ‡∏ü‡∏£‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏≥‡πÑ‡∏õ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
                            frame_copy = frame.copy()
                            
                            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ detections ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ "referenced before assignment"
                            detections = []
                            
                            # ‡πÉ‡∏ä‡πâ subprocess ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å yolo_worker.py ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
                            # ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                            # ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡πÅ‡∏ï‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
                            
                            # ‡∏™‡∏£‡πâ‡∏≤‡∏á temp directory ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
                            temp_dir = "uploads/temp_realtime"
                            os.makedirs(temp_dir, exist_ok=True)
                            
                            # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ü‡∏£‡∏°‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô (‡∏•‡∏î‡∏•‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
                            frame_resized = cv2.resize(frame_copy, (320, 240))
                            
                            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
                            temp_path = os.path.join(temp_dir, f"temp_frame_{camera_id}_{time.time()}.jpg")
                            
                            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
                            cv2.imwrite(temp_path, frame_resized, [cv2.IMWRITE_JPEG_QUALITY, 50])
                            
                            # ‡πÉ‡∏ä‡πâ subprocess ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å yolo_worker.py ‡∏ã‡∏∂‡πà‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß
                            # ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout ‡πÄ‡∏õ‡πá‡∏ô 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                            result = subprocess.run(
                                ["python", "app/services/yolo_worker.py", temp_path],
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE,
                                text=True,
                                timeout=10  # ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout ‡πÄ‡∏õ‡πá‡∏ô 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                            )
                            
                            # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                            try:
                                if os.path.exists(temp_path):
                                    os.remove(temp_path)
                            except Exception as e:
                                print(f"‚ö†Ô∏è Warning: Failed to delete temporary file: {e}")
                            
                            if result.returncode != 0:
                                print(f"‚ùå YOLO worker error: {result.stderr}")
                                detections = []
                            else:
                                # ‡πÅ‡∏¢‡∏Å JSON ‡∏à‡∏≤‡∏Å stdout
                                try:
                                    start_index = result.stdout.find("{")
                                    end_index = result.stdout.rfind("}") + 1
                                    if start_index == -1 or end_index == 0:
                                        detections = []
                                    else:
                                        clean_json = result.stdout[start_index:end_index]
                                        output = json.loads(clean_json)
                                        detections = output.get("detections", [])
                                except json.JSONDecodeError:
                                    print("‚ùå Failed to decode YOLO worker response")
                                    detections = []
                                    
                            # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏£‡∏≠‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
                            for detection in detections:
                                label = detection["label"]
                                conf = detection["confidence"]
                                box = detection["box"]
                                
                                x1, y1, x2, y2 = [int(float(coord)) for coord in box]
                                
                                # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö
                                cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                                
                                # ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô
                                label_text = f"{label}: {conf:.2f}"
                                cv2.putText(frame, label_text, (x1, y1 - 10), 
                                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
                        
                        except Exception as e:
                            print(f"‚ùå Error in detection: {str(e)}")
                            traceback.print_exc()
                        
                        # ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡πá‡∏ô base64
                        _, buffer = cv2.imencode('.jpg', frame)
                        yield (
                            b'--frame\r\n'
                            b'Content-Type: image/jpeg\r\n\r\n' + buffer.tobytes() + b'\r\n'
                        )
                        
                    except Exception as e:
                        print(f"‚ùå Error in detection: {str(e)}")
                        traceback.print_exc()
                
                # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ CPU ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                await asyncio.sleep(0.01)
                
        except Exception as e:
            print(f"‚ùå Error streaming camera with detection {camera_id}: {e}")
        finally:
            # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
            detection_flags[camera_id] = False

    return StreamingResponse(generate(), media_type="multipart/x-mixed-replace;boundary=frame")

# ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° WebSocket endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
@router.websocket("/ws/dual-stream")
async def dual_stream_ws(
    websocket: WebSocket,
    camera_id: int = Query(..., description="ID ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡∏£‡∏µ‡∏°"),
    db: Session = Depends(get_db)
):
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    camera = db.query(Camera).filter(Camera.id == camera_id).first()
    if not camera:
        await websocket.close(code=1008, reason="Camera not found")
        return

    rtsp_link = camera.stream_url
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á WebSocket
    websocket_active = True
    
    # ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket
    await websocket.accept()
    print("INFO: connection open")
    
    # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô process_rtsp ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå yolo_realtime_worker
    try:
        from app.services.yolo_realtime_worker import process_rtsp, start_worker, stop_worker
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° worker thread ‡∏Å‡πà‡∏≠‡∏ô
        start_worker()
        
        # ‡πÉ‡∏ä‡πâ process_rtsp ‡∏à‡∏≤‡∏Å yolo_realtime_worker ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å RTSP
        stream_generator = process_rtsp(rtsp_link, save_annotated=False)
        
        while websocket_active:
            try:
                # ‡πÉ‡∏ä‡πâ asyncio.wait_for ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡πÅ‡∏ä‡∏ô‡πÅ‡∏ô‡∏•
                next_frame = next(stream_generator)
                detections, raw_base64, annotated_base64, _ = next_frame
                
                # ‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà client
                try:
                    await asyncio.wait_for(
                        websocket.send_json({
                            "detections": detections,
                            "raw_image": raw_base64,
                            "annotated_image": annotated_base64
                        }),
                        timeout=0.5  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î timeout 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                    )
                    # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ (20ms) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô CPU ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                    await asyncio.sleep(0.02)
                except asyncio.TimeoutError:
                    # ‡πÄ‡∏Å‡∏¥‡∏î timeout - ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ WebSocket ‡∏¢‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    print("‚ö†Ô∏è Timeout sending data to WebSocket")
                    websocket_active = False
                    break
                except WebSocketDisconnect:
                    print(f"üîå WebSocket disconnected for camera {camera_id}")
                    websocket_active = False
                    break
                except Exception as e:
                    error_str = str(e).lower()
                    if "socket is closed" in error_str or "connection" in error_str or "websocket" in error_str:
                        print(f"üîå WebSocket closed: {str(e)}")
                        websocket_active = False
                        break
                    else:
                        print(f"‚ö†Ô∏è Error sending data to WebSocket: {str(e)}")
                        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
                        websocket_active = False
                        break
            except StopIteration:
                print("üõë Stream generator ended")
                websocket_active = False
                break
            except Exception as e:
                print(f"‚ùå Error in stream processing: {str(e)}")
                websocket_active = False
                break
                
    except WebSocketDisconnect:
        print(f"üîå WebSocket disconnected for camera {camera_id}")
    except Exception as e:
        print(f"‚ùå Error in dual stream WebSocket: {str(e)}")
        traceback.print_exc()
    finally:
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á worker thread ‡πÄ‡∏°‡∏∑‡πà‡∏≠ WebSocket ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î
        try:
            stop_worker()
            print(f"‚úÖ Stopped worker thread for camera {camera_id}")
        except Exception as e:
            print(f"‚ö†Ô∏è Error stopping worker: {str(e)}")
            
        # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket
        try:
            await websocket.close()
            print(f"‚úÖ Closed WebSocket for camera {camera_id}")
        except Exception as e:
            print(f"‚ö†Ô∏è Couldn't close WebSocket: {str(e)}")
            pass

# ‚úÖ ‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ö‡∏ö direct real-time (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ WebSocket)
@router.get("/realtime-detect-direct")
async def realtime_detect_direct(
    request: Request,
    camera_id: int = Query(..., description="ID ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö"),
    token: str = Header(None),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive(1, 4))
):
    """
    ‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á IP ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÅ‡∏ö‡∏ö real-time ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô WebSocket
    ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á client ‡πÄ‡∏•‡∏¢ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏†‡∏≤‡∏û‡∏õ‡∏Å‡∏ï‡∏¥
    """
    global video_captures, detection_flags
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å DB
    camera = db.query(Camera).filter(Camera.id == camera_id).first()
    if not camera:
        raise HTTPException(status_code=404, detail="Camera not found")

    rtsp_link = camera.stream_url  # ‡∏î‡∏∂‡∏á RTSP link ‡∏à‡∏≤‡∏Å DB

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if camera_id not in video_captures or not video_captures[camera_id].isOpened():
        await start_camera(camera_id, rtsp_link)

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
    device = 'cuda:0' if torch.cuda.is_available() else 'cpu'
    print(f"üîç Running direct YOLO streaming on device: {device} for camera {camera_id}")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
    detection_flags[camera_id] = True
    
    # ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Stream ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÅ‡∏ö‡∏ö direct
    async def generate():
        try:
            # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡πÜ X ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            last_detection_time = 0
            detection_interval = 0.5  # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏∏‡∏Å 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (2 FPS)
            last_detections = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ temp directory
            temp_dir = "uploads/temp_realtime"
            os.makedirs(temp_dir, exist_ok=True)
            
            while detection_flags.get(camera_id, True):
                if camera_id not in video_captures or not video_captures[camera_id].isOpened():
                    print(f"‚ö†Ô∏è ‡∏Å‡∏•‡πâ‡∏≠‡∏á {camera_id} ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î")
                    break
                    
                success, frame = video_captures[camera_id].read()
                if not success:
                    await asyncio.sleep(0.01)
                    continue
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
                current_time = time.time()
                should_detect = (current_time - last_detection_time) >= detection_interval
                
                try:
                    # ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
                    if should_detect:
                        last_detection_time = current_time
                        
                        # ‡∏ó‡∏≥‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡πÄ‡∏ü‡∏£‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
                        frame_copy = frame.copy()
                        
                        # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ü‡∏£‡∏°
                        frame_resized = cv2.resize(frame_copy, (320, 240))
                        
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡πâ‡∏ß‡∏¢ yolo_worker.py ‡∏ú‡πà‡∏≤‡∏ô subprocess
                        temp_path = os.path.join(temp_dir, f"temp_frame_{camera_id}_{current_time}.jpg")
                        cv2.imwrite(temp_path, frame_resized, [cv2.IMWRITE_JPEG_QUALITY, 50])
                        
                        try:
                            result = subprocess.run(
                                ["python", "app/services/yolo_worker.py", temp_path],
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE,
                                text=True,
                                timeout=5  # timeout 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                            )
                            
                            # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                            try:
                                if os.path.exists(temp_path):
                                    os.remove(temp_path)
                            except:
                                pass
                                
                            if result.returncode == 0:
                                try:
                                    # ‡πÅ‡∏¢‡∏Å JSON ‡∏à‡∏≤‡∏Å stdout
                                    start_index = result.stdout.find("{")
                                    end_index = result.stdout.rfind("}") + 1
                                    if start_index != -1 and end_index > 0:
                                        clean_json = result.stdout[start_index:end_index]
                                        output = json.loads(clean_json)
                                        last_detections = output.get("detections", [])
                                except:
                                    # ‡∏ñ‡πâ‡∏≤‡πÅ‡∏¢‡∏Å JSON ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                                    pass
                        except subprocess.TimeoutExpired:
                            # ‡∏ñ‡πâ‡∏≤ timeout ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                            print(f"‚ö†Ô∏è YOLO detection timeout for camera {camera_id}")
                        except Exception as e:
                            print(f"‚ùå Error in YOLO detection: {str(e)}")
                    
                    # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏£‡∏≠‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö (‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏î‡∏¥‡∏°)
                    for detection in last_detections:
                        label = detection["label"]
                        conf = detection["confidence"]
                        box = detection["box"]
                        
                        x1, y1, x2, y2 = [int(float(coord)) for coord in box]
                        
                        # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö
                        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                        
                        # ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô
                        label_text = f"{label}: {conf:.2f}"
                        cv2.putText(frame, label_text, (x1, y1 - 10), 
                                cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
                    
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
                    msg = f"‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏: {len(last_detections)} ‡∏ä‡∏¥‡πâ‡∏ô"
                    cv2.putText(frame, msg, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 255), 2)
                    
                    # ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á client
                    _, buffer = cv2.imencode('.jpg', frame)
                    yield (
                        b'--frame\r\n'
                        b'Content-Type: image/jpeg\r\n\r\n' + buffer.tobytes() + b'\r\n'
                    )
                    
                except Exception as e:
                    print(f"‚ùå Error in frame processing: {str(e)}")
                    traceback.print_exc()
                
                # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ CPU ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                await asyncio.sleep(0.01)
                
        except Exception as e:
            print(f"‚ùå Error in direct detection streaming: {str(e)}")
            traceback.print_exc()
        finally:
            # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
            detection_flags[camera_id] = False
            print(f"üõë Direct realtime detection stopped for camera {camera_id}")

    return StreamingResponse(generate(), media_type="multipart/x-mixed-replace;boundary=frame")

# ‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ö‡∏ö real-time
@router.get("/stop-realtime")
async def stop_realtime_detection(
    camera_id: int = Query(..., description="ID ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö"),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive(1, 4))
):
    global detection_flags
    
    print(f"üîÑ ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö real-time ‡∏Å‡∏•‡πâ‡∏≠‡∏á {camera_id}")
    
    # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
    detection_flags[camera_id] = False
    
    return JSONResponse(content={"message": f"üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö real-time ‡∏Å‡∏•‡πâ‡∏≠‡∏á {camera_id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"})

# ‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
@router.get("/stop-stream")
async def stop_stream(
    camera_id: int = Query(..., description="ID ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î"),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive(1, 4))
):
    print(f"üîÑ ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á {camera_id}")
    
    await stop_camera(camera_id)

    return JSONResponse(content={"message": f"üõë ‡∏Å‡∏•‡πâ‡∏≠‡∏á {camera_id} ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"})


# ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Executor
executor = ThreadPoolExecutor(max_workers=4) 

def get_executor():
    global executor
    if executor is None:
        executor = ThreadPoolExecutor(max_workers=4)
    return executor

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• YOLO
def process_yolo(file_path: str):
    """
    ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• YOLO ‡∏ö‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û
    """
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
        if not os.path.exists(file_path):
            print(f"‚ùå File not found: {file_path}")
            return []
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ CUDA (GPU) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        device = 'cuda:0' if torch.cuda.is_available() else 'cpu'
        print(f"üîç Running YOLO on device: {device}")
        
        # ‡πÉ‡∏ä‡πâ file path ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡∏≠‡∏¢‡πà‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô OpenCV image)
        results = model.predict(source=file_path, conf=0.1, iou=0.45, stream=False, device=device)
        detections = []

        for result in results:
            for box in result.boxes.data:
                x1, y1, x2, y2, conf, cls = box.tolist()
                if conf > 0.3:
                    label = model.names[int(cls)]
                    detections.append({
                        "label": label,
                        "confidence": float(conf),
                        "box": [float(x1), float(y1), float(x2), float(y2)],
                    })

        if torch.cuda.is_available():
            torch.cuda.empty_cache()

        print(f"‚úÖ YOLO processing completed: {len(detections)} objects detected.")
        return detections
    except Exception as e:
        print(f"‚ùå Error in YOLO processing: {str(e)}")
        traceback.print_exc()  # ‡πÄ‡∏û‡∏¥‡πà‡∏° traceback ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        return []  # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ raise exception ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ



# ‚úÖ Route: ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
@router.post("/detect", response_class=JSONResponse)
async def detect_objects(
    file: UploadFile = File(...),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive(1, 4))
):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ subprocess ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å yolo_worker.py
    """  
    file_path = os.path.join(UPLOAD_DIR, file.filename)

    try:
        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û
        with open(file_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)

        if not os.path.exists(file_path):
            raise HTTPException(status_code=400, detail="Uploaded image not found on server.")

        # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô yolo_worker.py ‡∏ú‡πà‡∏≤‡∏ô subprocess
        result = subprocess.run(
            ["python", "app/services/yolo_worker.py", file_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )

        # Debug logs
        print("STDOUT:", result.stdout)
        print("STDERR:", result.stderr)

        if result.returncode != 0:
            print(f"‚ùå YOLO worker error: {result.stderr}")
            raise HTTPException(status_code=500, detail="YOLO worker failed.")

        # ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ JSON ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å STDOUT
        try:
            start_index = result.stdout.find("{")
            end_index = result.stdout.rfind("}") + 1
            if start_index == -1 or end_index == 0:
                raise json.JSONDecodeError("No JSON found in stdout", result.stdout, 0)
            clean_json = result.stdout[start_index:end_index]
            output = json.loads(clean_json)
        except json.JSONDecodeError:
            print("‚ùå Failed to decode YOLO worker response.")
            raise HTTPException(status_code=500, detail="Invalid response from YOLO worker.")

        response = JSONResponse(content={"detections": output.get("detections", []), "image_path": file_path, "annotated_image_path": output.get("annotated_image", "") })

        # response = JSONResponse(content={"detections": [], "image_path": file_path}) # debug capture only comment out

        return response

    except Exception as e:
        print(f"‚ùå Unexpected error: {str(e)}")
        print(traceback.format_exc())
        raise HTTPException(status_code=500, detail="Unexpected server error during detection process.")


# Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á
@router.get("/cameras", response_class=JSONResponse)
def get_cameras(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive(1, 4))
):
    """
    ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô DB
    ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤ Model Camera ‡∏°‡∏µ attribute: id, table_number, name, stream_url
    """
    cameras = db.query(Camera).all()
    return [
        {
            "id": camera.id,
            # "table_number": camera.table_number,
            "name": camera.name,
            "stream_url": camera.stream_url
        } for camera in cameras
    ]

# Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ packing
@router.get("/orders/packing", response_class=JSONResponse)
def get_packing_orders(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive(1, 4))
):
    """
    ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ packing ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡∏°‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å assign ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å assign ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    """
    orders = db.query(Order)\
        .options(joinedload(Order.customer))\
        .filter(or_(Order.assigned_to == None, Order.assigned_to == current_user.id))\
        .filter(Order.status.in_(["packing", "verifying"]))\
        .all()
    return [
        {
            "id": order.order_id,
            "email": order.customer.email if order.customer else None,
            "total": order.total,
            "created_at": order.created_at,
            "items": order.order_items,
            "assigned_to": order.assigned_to
        } for order in orders
    ]

@router.put("/orders/{order_id}/assign", response_class=JSONResponse)
def assign_order(
    order_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive(1, 4)),
):
    
    order = (
        db.query(Order)
        .options(
            joinedload(Order.customer),
            joinedload(Order.order_items).joinedload(OrderItem.product)
        )
        .filter(
            and_(
                Order.order_id == order_id,
                Order.status.in_(["packing", "pending"]),
                Order.assigned_to == None
            )
        )
        .with_for_update()
        .first()
    )
    
    if not order:
        raise HTTPException(status_code=404, detail="Order not found or already assigned")

    order.assigned_to = current_user.id
    order.status = "verifying"
    
    order.updated_at = datetime.utcnow()  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ assign
    db.commit()
    db.refresh(order)

    # Format the order items properly
    formatted_items = [
        {
            "product_id": item.product_id,
            "product_name": item.product.name if item.product else "Unknown",
            "quantity": item.quantity,
            "price": item.price_at_order,
            "total": item.total_item_price
        }
        for item in order.order_items
    ]

    order_data = {
        "order_id": order.order_id,
        "customer_email": order.customer.email if order.customer else None,
        "total_price": order.total,
        "items": formatted_items,
        "created_at": order.created_at.strftime("%Y-%m-%d %H:%M:%S"),
    }

    return JSONResponse(content=order_data)

@router.post("/orders/{order_id}/upload-image", response_class=JSONResponse)
async def upload_packed_image(
    order_id: int,
    file: UploadFile = File(...),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive(1, 4))
):
    """
    ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    """
    order = db.query(Order).filter(Order.order_id == order_id, Order.assigned_to == current_user.id).first()
    if not order:
        raise HTTPException(status_code=404, detail="Order not found or not assigned to you")

    upload_dir = "uploads/packed_orders"
    os.makedirs(upload_dir, exist_ok=True)
    file_path = os.path.join(upload_dir, f"{order_id}.jpg")

    # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
    with open(file_path, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)

    order.image_path = file_path  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å path ‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á database
    db.commit()

    return JSONResponse(content={"message": "Image uploaded successfully", "image_path": file_path})

@router.put("/orders/{order_id}/verify", response_class=JSONResponse)
async def verify_order(
    order_id: int,
    request: Request,
    verified: bool = Form(...),
    file: UploadFile = File(None),
    camera_id: int = Form(None),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive(1, 4))
):
    """
    ‚úÖ ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
    
    ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏û‡πá‡∏Ñ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö:
    1. ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô "confirmed" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    2. ‡∏Ñ‡∏∑‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡∏´‡∏±‡∏Å‡πÑ‡∏ß‡πâ‡∏ï‡∏≠‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏î‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
    3. ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏ó‡∏£‡∏≤‡∏ö‡∏ñ‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
    """
    order = db.query(Order).filter(Order.order_id == order_id, Order.assigned_to == current_user.id).first()
    if not order:
        raise HTTPException(status_code=404, detail="Order not found or not assigned to you")

    # ‡∏î‡∏∂‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    has_image = False
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö request
    print(f"Request headers: {request.headers}")
    print(f"Referer: {request.headers.get('referer', 'No referer')}")
      # ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤
    if file and file.filename:
        has_image = True
        upload_dir = "uploads/packed_orders"
        os.makedirs(upload_dir, exist_ok=True)
        file_path = os.path.join(upload_dir, f"{order_id}.jpg").replace("\\", "/")
        with open(file_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)
        order.image_path = file_path
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á camera_id ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÉ‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
        if camera_id:
            order.camera_id = camera_id
            print(f"‚úÖ Image uploaded from form data with camera_id {camera_id}: {file_path}")
        else:
            print(f"‚úÖ Image uploaded from form data (no camera_id): {file_path}")
    
    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    elif order.image_path and os.path.exists(order.image_path):
        has_image = True
        print(f"‚úÖ Using existing image: {order.image_path}")
    
    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
    else:
        print("‚ö†Ô∏è No image found, attempting to capture from active camera")
        try:
            # ‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            cameras = db.query(Camera).all()
            for camera in cameras:
                camera_id = camera.id
                if camera_id in video_captures and video_captures[camera_id].isOpened():
                    # ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
                    success, frame = video_captures[camera_id].read()
                    if success:
                        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                        upload_dir = "uploads/packed_orders"
                        os.makedirs(upload_dir, exist_ok=True)
                        file_path = os.path.join(upload_dir, f"{order_id}.jpg").replace("\\", "/")
                        cv2.imwrite(file_path, frame)
                        order.image_path = file_path
                        has_image = True
                        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å camera_id ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
                        order.camera_id = camera_id
                        print(f"‚úÖ Captured new image from camera {camera_id}: {file_path}")
                        break
        except Exception as e:
            print(f"‚ùå Error capturing frame from camera: {str(e)}")

    # ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö referer ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏£‡∏ì‡∏µ dual-stream ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÅ‡∏•‡πâ‡∏ß
    referer = str(request.headers.get('referer', ''))
    is_from_camera_page = any(keyword in referer.lower() for keyword in ['dual-stream', 'packing_dashboard', 'camera', 'detect'])
    
    if not has_image and not is_from_camera_page:
        print(f"‚ùå No image available and not from camera page. Referer: {referer}")
        raise HTTPException(status_code=400, detail="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô")
    else:
        print(f"‚úÖ Verification proceeding. has_image={has_image}, is_from_camera_page={is_from_camera_page}")    # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‚Üí ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "confirmed" (‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°) ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    if not verified:
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å
        order_items = db.query(OrderItem).filter(OrderItem.order_id == order_id).all()
        
        # ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡∏´‡∏±‡∏Å‡πÑ‡∏õ
        for item in order_items:
            product = db.query(Product).filter(Product.product_id == item.product_id).first()
            if product:
                product.stock += item.quantity
                print(f"‚úÖ Restored {item.quantity} units to product {product.name} (ID: {product.product_id})")
        
    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "confirmed" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ù‡πà‡∏≤‡∏¢‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        order.status = "confirmed"
        order.updated_at = datetime.utcnow()  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        db.commit()        # ‚úÖ ‡∏™‡πà‡∏á HTTP Request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Home ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Admin ‡πÅ‡∏•‡∏∞‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°
        try:
            url = "http://192.168.0.44:8000/admin/trigger-notify"
            # url = "https://home.jintaphas.tech/admin/trigger-notify"
            payload = {
                "order_id": order_id,
                "reason": "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°"
            }
            resp = requests.post(url, json=payload, timeout=5)
            print("Notify admin response:", resp.status_code, resp.text)
            
            # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏î‡πâ‡∏ß‡∏¢ WebSocket
            await notify_preparation(order_id, "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÉ‡∏´‡∏°‡πà")
            
        except Exception as e:            print("Error calling home to notify staff:", e)
        return JSONResponse(content={
            "message": "Order sent back to preparation staff", 
            "order_id": order_id, 
            "status": "confirmed",
            "camera_id": order.camera_id
        })    # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏£‡∏ö ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô "completed"
    order.is_verified = verified
    order.status = "completed"
    order.updated_at = datetime.utcnow()  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    db.commit()

    return JSONResponse(content={
        "message": "Order verification updated", 
        "order_id": order_id, 
        "status": "completed",
        "camera_id": order.camera_id
    })

@router.get("/orders/current", response_class=JSONResponse)
def get_current_order(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive(1, 4))
):
    """
    ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏û‡πá‡∏Ñ‡∏≠‡∏¢‡∏π‡πà
    """
    order = db.query(Order)\
        .options(
            joinedload(Order.customer),
            joinedload(Order.order_items).joinedload(OrderItem.product)
        )\
        .filter(
            Order.assigned_to == current_user.id,  
            Order.status.in_(["verifying", "packing"])
        )\
        .order_by(Order.created_at.desc())\
        .first()

    if not order:
        return JSONResponse(content={"message": "No active order"}, status_code=200)

    formatted_items = [
        {
            "product_id": item.product_id,
            "product_name": item.product.name if item.product else "Unknown",
            "quantity": item.quantity,
            "price": item.price_at_order,
            "total": item.total_item_price,
            "image_path": item.product.image_path if item.product else None        }
        for item in order.order_items
    ]
    
    return JSONResponse(content={
        "order_id": order.order_id,
        "customer_email": order.customer.email if order.customer else None,
        "total_price": order.total,
        "items": formatted_items,
        "created_at": order.created_at.strftime("%Y-%m-%d %H:%M:%S"),
        "image_path": order.image_path,
        "camera_id": order.camera_id  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• camera_id
    })

@router.get("/orders/{order_id}/image", response_class=FileResponse)
async def get_order_image(
    order_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    ‚úÖ ‡πÉ‡∏´‡πâ API ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏û‡πá‡∏Ñ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    """
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏° order_id
    order = db.query(Order).filter(Order.order_id == order_id).first()
    
    if not order:
        raise HTTPException(status_code=404, detail="Order not found")

    # ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°
    if not order.image_path or not os.path.exists(order.image_path):
        raise HTTPException(status_code=404, detail="No packed order image found")

    return FileResponse(order.image_path, media_type="image/jpeg")

# Add a new endpoint to fetch all product names for the YOLO detector
@router.get("/product-names", response_class=JSONResponse)
def get_product_names(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive(1, 4))
):
    """
    ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö YOLO detector
    """
    products = db.query(Product.name).all()
    product_names = [product[0] for product in products]
    
    return JSONResponse(content={"product_names": product_names})

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
templates = Jinja2Templates(directory="app/templates")

# ‚úÖ WebSocket endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ö‡∏ö real-time ‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°
@router.websocket("/ws/webcam-detect")
async def websocket_webcam_detect(websocket: WebSocket, token: str = None):
    """
    WebSocket endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö
    ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏ô Flask ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ WebSocket ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤
    """
    await websocket.accept()
    device = 'cuda:0' if torch.cuda.is_available() else 'cpu'
    print(f"üîç New WebSocket connection for webcam detection. Using device: {device}")
    
    try:
        while True:
            # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û (base64) ‡∏à‡∏≤‡∏Å client
            data = await websocket.receive_text()
            try:
                json_data = json.loads(data)
                image_data = json_data.get("image")
                
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å base64 -> OpenCV image
                image_data = re.sub('^data:image/.+;base64,', '', image_data)
                image_bytes = base64.b64decode(image_data)
                np_arr = np.frombuffer(image_bytes, np.uint8)
                img = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)
                
                if img is None or img.size == 0:
                    await websocket.send_json({"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ"})
                    continue
                
                # ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ model
                results = model(img, conf=0.3)
                detections = []
                
                # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
                for result in results:
                    boxes = result.boxes
                    for box in boxes.data:
                        x1, y1, x2, y2, conf, cls = box.tolist()
                        label = model.names[int(cls)]
                        detections.append({
                            "label": label,
                            "confidence": float(conf),
                            "box": [float(x1), float(y1), float(x2), float(y2)],
                        })
                        
                        # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏£‡∏≠‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
                        cv2.rectangle(img, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 2)
                        
                        # ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô
                        label_text = f"{label}: {conf:.2f}"
                        cv2.putText(img, label_text, (int(x1), int(y1) - 10), 
                                  cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
                
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô base64
                _, buffer = cv2.imencode('.jpg', img)
                img_base64 = base64.b64encode(buffer).decode('utf-8')
                
                # ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á client
                await websocket.send_json({
                    "image": img_base64,
                    "detections": detections,
                    "count": len(detections)
                })
                
            except json.JSONDecodeError:
                await websocket.send_json({"error": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"})
            except Exception as e:
                print(f"‚ùå Error processing frame: {str(e)}")
                await websocket.send_json({"error": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"})
    
    except WebSocketDisconnect:
        print("‚ö†Ô∏è WebSocket client disconnected")
    except Exception as e:
        print(f"‚ùå WebSocket error: {str(e)}")
        traceback.print_exc()

# ‚úÖ WebSocket endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ö‡∏ö real-time ‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á IP
@router.websocket("/ws/camera-detect")
async def websocket_camera_detect(websocket: WebSocket, camera_id: int = Query(...)):
    """
    WebSocket endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÅ‡∏ö‡∏ö real-time ‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á IP ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á client ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    """
    global video_captures, detection_flags
    
    await websocket.accept()
    detection_interval = 0.5  # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏∏‡∏Å 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (2 FPS)
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å DB
    try:
        db = next(get_db())
        camera = db.query(Camera).filter(Camera.id == camera_id).first()
        if not camera:
            await websocket.send_json({"error": "Camera not found"})
            await websocket.close()
            return
        
        rtsp_link = camera.stream_url
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        if camera_id not in video_captures or not video_captures[camera_id].isOpened():
            success = await start_camera(camera_id, rtsp_link)
            if not success:
                await websocket.send_json({"error": f"Failed to open camera {camera_id}"})
                await websocket.close()
                return
        
        device = 'cuda:0' if torch.cuda.is_available() else 'cpu'
        print(f"üîç Starting WebSocket camera detection. Using device: {device} for camera {camera_id}")
        
        detection_flags[camera_id] = True
        last_detection_time = 0
        
        try:
            while detection_flags.get(camera_id, True):
                if camera_id not in video_captures or not video_captures[camera_id].isOpened():
                    print(f"‚ö†Ô∏è Camera {camera_id} is closed")
                    break
                
                success, frame = video_captures[camera_id].read()
                if not success:
                    await asyncio.sleep(0.01)
                    continue
                
                current_time = time.time()
                should_detect = (current_time - last_detection_time) >= detection_interval
                
                if should_detect:
                    last_detection_time = current_time
                    
                    try:
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ü‡∏£‡∏°
                        if frame is None or not isinstance(frame, np.ndarray) or frame.size == 0:
                            print(f"‚ö†Ô∏è Invalid frame received from camera {camera_id}")
                            await asyncio.sleep(0.01)
                            continue
                        
                        try:
                            # ‡∏ó‡∏≥‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡πÄ‡∏ü‡∏£‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏≥‡πÑ‡∏õ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
                            frame_copy = frame.copy()
                            
                            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ detections ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ "referenced before assignment"
                            detections = []
                            
                            # ‡πÉ‡∏ä‡πâ subprocess ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å yolo_worker.py ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
                            # ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                            # ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡πÅ‡∏ï‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
                            
                            # ‡∏™‡∏£‡πâ‡∏≤‡∏á temp directory ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
                            temp_dir = "uploads/temp_realtime"
                            os.makedirs(temp_dir, exist_ok=True)
                            
                            # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ü‡∏£‡∏°‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô (‡∏•‡∏î‡∏•‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
                            frame_resized = cv2.resize(frame_copy, (320, 240))
                            
                            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
                            temp_path = os.path.join(temp_dir, f"temp_frame_{camera_id}_{time.time()}.jpg")
                            
                            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
                            cv2.imwrite(temp_path, frame_resized, [cv2.IMWRITE_JPEG_QUALITY, 50])
                            
                            # ‡πÉ‡∏ä‡πâ subprocess ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å yolo_worker.py ‡∏ã‡∏∂‡πà‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß
                            # ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout ‡πÄ‡∏õ‡πá‡∏ô 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                            result = subprocess.run(
                                ["python", "app/services/yolo_worker.py", temp_path],
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE,
                                text=True,
                                timeout=10  # ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout ‡πÄ‡∏õ‡πá‡∏ô 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                            )
                            
                            # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                            try:
                                if os.path.exists(temp_path):
                                    os.remove(temp_path)
                            except Exception as e:
                                print(f"‚ö†Ô∏è Warning: Failed to delete temporary file: {e}")
                            
                            if result.returncode != 0:
                                print(f"‚ùå YOLO worker error: {result.stderr}")
                                detections = []
                            else:
                                # ‡πÅ‡∏¢‡∏Å JSON ‡∏à‡∏≤‡∏Å stdout
                                try:
                                    start_index = result.stdout.find("{")
                                    end_index = result.stdout.rfind("}") + 1
                                    if start_index == -1 or end_index == 0:
                                        detections = []
                                    else:
                                        clean_json = result.stdout[start_index:end_index]
                                        output = json.loads(clean_json)
                                        detections = output.get("detections", [])
                                except json.JSONDecodeError:
                                    print("‚ùå Failed to decode YOLO worker response")
                                    detections = []
                                    
                            # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏£‡∏≠‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
                            for detection in detections:
                                label = detection["label"]
                                conf = detection["confidence"]
                                box = detection["box"]
                                
                                x1, y1, x2, y2 = [int(float(coord)) for coord in box]
                                
                                # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö
                                cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                                
                                # ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô
                                label_text = f"{label}: {conf:.2f}"
                                cv2.putText(frame, label_text, (x1, y1 - 10), 
                                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
                        
                        except Exception as e:
                            print(f"‚ùå Error in detection: {str(e)}")
                            traceback.print_exc()
                        
                        # ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡πá‡∏ô base64
                        _, buffer = cv2.imencode('.jpg', frame)
                        img_base64 = base64.b64encode(buffer).decode('utf-8')
                        
                        # ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á client
                        await websocket.send_json({
                            "image": img_base64,
                            "detections": detections,
                            "count": len(detections)
                        })
                        
                    except Exception as e:
                        print(f"‚ùå Error in detection: {str(e)}")
                        traceback.print_exc()
                
                # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ CPU ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                await asyncio.sleep(0.01)
                
        except WebSocketDisconnect:
            print(f"‚ö†Ô∏è WebSocket client disconnected for camera {camera_id}")
        finally:
            # ‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ client disconnect ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà
            detection_flags[camera_id] = False
    
    except Exception as e:
        print(f"‚ùå WebSocket camera detection error: {str(e)}")
        traceback.print_exc()
        try:
            await websocket.send_json({"error": f"Server error: {str(e)}"})
        except:
            pass
    finally:
        # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket
        try:
            await websocket.close()
        except:
            pass

# ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö real-time ‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°
@router.get("/realtime-webcam", response_class=HTMLResponse)
async def get_realtime_webcam_page(
    request: Request,
    current_user: User = Depends(get_user_with_role_and_position_and_isActive(1, 4))
):
    """
    ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö real-time ‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°
    """
    return templates.TemplateResponse("realtime_detection.html", {"request": request, "current_user": current_user})
