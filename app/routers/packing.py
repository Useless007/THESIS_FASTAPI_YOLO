# app/routers/packing.py

from concurrent.futures import ThreadPoolExecutor,ProcessPoolExecutor
import asyncio
from fastapi import APIRouter, Depends, UploadFile, File, HTTPException,Query,Header, Response
from fastapi.responses import JSONResponse, StreamingResponse
from sqlalchemy.orm import Session
from app.models.user import User
from app.services.auth import get_user_with_role_and_position_and_isActive
from app.database import get_db
import subprocess,json,shutil,torch,os,cv2,traceback,threading
from ultralytics import YOLO

router = APIRouter(prefix="/packing", tags=["Packing Staff"])
stream_lock = asyncio.Lock()  # Lock ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Stream

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLOv10
MODEL_PATH = "app/models/best.pt"
UPLOAD_DIR = "uploads/packing_images"
os.makedirs(UPLOAD_DIR, exist_ok=True)

# stream_lock = threading.Lock()  # Lock ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Stream

try:
    model = YOLO(MODEL_PATH)
except Exception as e:
    raise HTTPException(status_code=500, detail=f"‚ùå Failed to load YOLOv10 model: {str(e)}")


# ‚úÖ ‡∏Å‡∏•‡πâ‡∏≠‡∏á IP RTSP
RTSP_LINK = 'rtsp://admin:R2teamza99@192.168.0.242:10544/tcp/av0_0'

# gst_pipeline = (
#     f"rtspsrc location={RTSP_LINK} latency=0 ! "
#     "decodebin ! videoconvert ! appsink"
# )
# video_capture = cv2.VideoCapture(gst_pipeline, cv2.CAP_GSTREAMER)

video_capture = cv2.VideoCapture(RTSP_LINK, cv2.CAP_FFMPEG)
# video_capture = cv2.VideoCapture(RTSP_LINK)
video_capture.set(cv2.CAP_PROP_BUFFERSIZE, 1)  # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î buffer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
video_capture.set(cv2.CAP_PROP_FPS, 15)  # ‡∏•‡∏î Frame Rate
video_capture.set(cv2.CAP_PROP_POS_MSEC, 5000)  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î timeout (5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)

async def start_camera():
    global video_capture
    print("üîç Trying to open RTSP stream...")

    # ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if video_capture is not None:
        video_capture.release()
        video_capture = None
        await asyncio.sleep(1)

    retry_count = 0
    max_retries = 5
    while retry_count < max_retries:
        video_capture = cv2.VideoCapture(RTSP_LINK, cv2.CAP_FFMPEG)
        await asyncio.sleep(2)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        if video_capture.isOpened():
            print("‚úÖ Camera stream started successfully.")
            return True
        else:
            print(f"‚ö†Ô∏è Attempt {retry_count + 1} to open camera stream failed.")
            video_capture.release()  # ‡∏õ‡∏¥‡∏î‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            video_capture = None
        retry_count += 1

    print("‚ùå Failed to open RTSP stream after multiple retries.")
    return False

async def stop_camera():
    global video_capture
    if video_capture and video_capture.isOpened():
        print("üõë Stopping camera stream...")
        video_capture.release()
        cv2.destroyAllWindows()
        video_capture = None  # ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô None
        await asyncio.sleep(1)  # ‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
    print("‚úÖ Camera resources released.")


# ‚úÖ ‡πÅ‡∏Ñ‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
@router.get("/snapshot")
async def snapshot():
    global video_capture
    # ‡∏ñ‡πâ‡∏≤ video_capture ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î ‡∏Å‡πá‡∏ï‡πâ‡∏≠‡∏á start_camera() ‡∏Å‡πà‡∏≠‡∏ô
    if video_capture is None or not video_capture.isOpened():
        raise HTTPException(status_code=400, detail="Camera is not opened")

    success, frame = video_capture.read()
    if not success:
        raise HTTPException(status_code=500, detail="Cannot read frame from camera")

    # encode ‡πÄ‡∏õ‡πá‡∏ô jpg
    _, buffer = cv2.imencode('.jpg', frame)

    return Response(content=buffer.tobytes(), media_type="image/jpeg")


# ‚úÖ ‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
@router.get("/stream")
async def stream_video(
    token: str = Header(None),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive("employee", "packing staff"))
):
    global video_capture

    await start_camera()

    # ‡∏•‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏ã‡πâ‡∏≠‡∏ô
    locked = stream_lock.locked()
    if locked:
        raise HTTPException(status_code=429, detail="Stream is already in use.")

    # ‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö if locked:

    async def generate():
        try:
            while True:
                if video_capture is None or not video_capture.isOpened():
                    print("‚ö†Ô∏è Camera is not opened or has been stopped.")
                    break

                success, frame = video_capture.read()
                if not success:
                    await asyncio.sleep(0.01)
                    continue

                # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô .jpg
                _, buffer = cv2.imencode('.jpg', frame)

                # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (mjpeg)
                yield (
                    b'--frame\r\n'
                    b'Content-Type: image/jpeg\r\n\r\n' + buffer.tobytes() + b'\r\n'
                )

                await asyncio.sleep(0.01)
        except Exception as e:
            print(f"‚ùå Error during stream generation: {e}")
        finally:
            # ‡∏ñ‡πâ‡∏≤ generator ‡∏´‡∏•‡∏∏‡∏î/‡∏à‡∏ö‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏ì‡∏µ‡πÉ‡∏î ‡πÉ‡∏´‡πâ stop_camera()
            await stop_camera()

    response = StreamingResponse(
        generate(), 
        media_type="multipart/x-mixed-replace;boundary=frame"
    )
    # response.headers["Access-Control-Allow-Origin"] = "*"
    # response.headers["Access-Control-Allow-Headers"] = "*"
    return response



# ‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
@router.get("/stop-stream")
async def stop_stream(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive("employee", "packing staff"))
):
    print("üîÑ Request received to stop camera stream.")
    
    # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏Å‡πà‡∏≠‡∏ô
    await stop_camera()

    # ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ Client ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    response = JSONResponse(content={"message": "üõë Camera stream stopped successfully."})
    response.headers["Connection"] = "close"
    return response


# ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Executor
executor = ThreadPoolExecutor(max_workers=4) 

def get_executor():
    global executor
    if executor is None:
        executor = ThreadPoolExecutor(max_workers=4)
    return executor

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• YOLO
def process_yolo(file_path: str):
    """
    ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• YOLO ‡∏ö‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û
    """
    try:
        results = model.predict(source=file_path, conf=0.1, iou=0.45, stream=False, device='cpu')
        detections = []

        for result in results:
            for box in result.boxes.data:
                x1, y1, x2, y2, conf, cls = box.tolist()
                if conf > 0.3:
                    label = model.names[int(cls)]
                    detections.append({
                        "label": label,
                        "confidence": float(conf),
                        "box": [float(x1), float(y1), float(x2), float(y2)],
                    })

        if torch.cuda.is_available():
            torch.cuda.empty_cache()

        print(f"‚úÖ YOLO processing completed: {len(detections)} objects detected.")
        return detections
    except Exception as e:
        print(f"‚ùå Error in YOLO processing: {str(e)}")
        raise HTTPException(status_code=500, detail="Error processing YOLO predictions")



# ‚úÖ Route: ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
@router.post("/detect", response_class=JSONResponse)
async def detect_objects(
    file: UploadFile = File(...),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive("employee", "packing staff"))
):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ subprocess ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å yolo_worker.py
    """  
    file_path = os.path.join(UPLOAD_DIR, file.filename)

    try:
        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û
        with open(file_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)

        if not os.path.exists(file_path):
            raise HTTPException(status_code=400, detail="Uploaded image not found on server.")

        # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô yolo_worker.py ‡∏ú‡πà‡∏≤‡∏ô subprocess
        result = subprocess.run(
            ["python", "app/services/yolo_worker.py", file_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )

        # Debug logs
        print("STDOUT:", result.stdout)
        print("STDERR:", result.stderr)

        if result.returncode != 0:
            print(f"‚ùå YOLO worker error: {result.stderr}")
            raise HTTPException(status_code=500, detail="YOLO worker failed.")

        # ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ JSON ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å STDOUT
        try:
            start_index = result.stdout.find("{")
            end_index = result.stdout.rfind("}") + 1
            if start_index == -1 or end_index == 0:
                raise json.JSONDecodeError("No JSON found in stdout", result.stdout, 0)
            clean_json = result.stdout[start_index:end_index]
            output = json.loads(clean_json)
        except json.JSONDecodeError:
            print("‚ùå Failed to decode YOLO worker response.")
            raise HTTPException(status_code=500, detail="Invalid response from YOLO worker.")

        response = JSONResponse(content={"detections": output.get("detections", []), "image_path": file_path})

        # response = JSONResponse(content={"detections": [], "image_path": file_path}) # debug capture only comment out

        return response

    except Exception as e:
        print(f"‚ùå Unexpected error: {str(e)}")
        print(traceback.format_exc())
        raise HTTPException(status_code=500, detail="Unexpected server error during detection process.")
