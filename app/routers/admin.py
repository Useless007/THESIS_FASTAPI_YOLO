# app/routers/admin.py

import json
from fastapi import APIRouter, Depends, Request, HTTPException, WebSocket, WebSocketDisconnect
from typing import List
from fastapi.responses import HTMLResponse, JSONResponse, RedirectResponse
from app.services.ws_manager import NotifyPayload, notify_admin
from datetime import datetime
from sqlalchemy.orm import Session
from sqlalchemy import func, cast, Date, and_, or_
from app.models.user import User
from app.models.order import Order
from app.models.camera import Camera
from app.services.auth import get_user_with_role_and_position_and_isActive, get_current_user, get_user_with_role
from app.services.ws_manager import admin_connections
from app.database import get_db
from fastapi.templating import Jinja2Templates
from app.crud import camera as camera_crud
from app.schemas.camera import CameraCreate, CameraUpdate, Camera as CameraSchema
from app.crud import user as user_crud

admin_connections: List[WebSocket] = []
templates = Jinja2Templates(directory="app/templates")

router = APIRouter(prefix="/admin", tags=["Admin"])

# Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Admin Dashboard
@router.get("/dashboard", response_class=HTMLResponse)
def dashboard_redirect(
    request: Request,
    current_user: User = Depends(get_current_user)
):

    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    """
    if not current_user:
        raise HTTPException(status_code=401, detail="‚ùå Unauthorized")

    if current_user.role == "employee" and current_user.position == "admin":
        print(f"üõ°Ô∏è Admin Dashboard Access by: {current_user.email}")
        return templates.TemplateResponse("admin_dashboard.html", {"request": request, "current_user": current_user})
    elif current_user.role == "employee" and current_user.position == "packing staff":
        print(f"üõ°Ô∏è Packing Dashboard Access by: {current_user.email}")
        return templates.TemplateResponse("packing_dashboard.html", {"request": request, "current_user": current_user})
    elif current_user.role == "employee" and current_user.position == "preparation staff":    
        print(f"üõ°Ô∏è Preparation Dashboard Access by: {current_user.email}")
        return templates.TemplateResponse("preparation_dashboard.html", {"request": request, "current_user": current_user})
    else:
        raise HTTPException(status_code=403, detail="‚ùå Access Denied: Role or Position Invalid")

# Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î
@router.get("/dashboard-data")
def get_dashboard_data(
    db: Session = Depends(get_db),
    current_user=Depends(get_user_with_role_and_position_and_isActive("employee", "admin"))
):
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏≤‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô completed
    """
    # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    user_count = db.query(User).count()

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á Order
    sales_today = (
        db.query(func.sum(Order.total))
        .filter(
            Order.status == "completed",  # ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô completed
            cast(Order.created_at, Date) == datetime.utcnow().date()  # ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        )
        .scalar() or 0.0  # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á 0.0
    )

    return {
        "user_count": user_count,
        "sales_today": sales_today
    }

# Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Activate ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
@router.get("/activate", response_class=HTMLResponse)
def get_user_management(
    request: Request,
    current_user: User = Depends(get_user_with_role_and_position_and_isActive("employee", "admin"))
):
    print(f"üõ°Ô∏è Activate Management Access by: {current_user.email}")
    return templates.TemplateResponse("admin_activate.html", {"request": request, "current_user": current_user})

# Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
@router.get("/orders", response_class=HTMLResponse)
def get_order_management(
    request: Request,
    current_user: User = Depends(get_user_with_role_and_position_and_isActive("employee", "admin"))
):
    print(f"üõ°Ô∏è Order Management Access by: {current_user.email}")
    return templates.TemplateResponse("admin_orders.html", {"request": request, "current_user": current_user})

@router.get("/users", response_class=JSONResponse)
def get_all_users(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive("employee", "admin"))
):
    """
    ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    """
    users = db.query(User).all()
    user_data = [{"id": user.id, "name": user.name, "role": user.role, "position": user.position} for user in users]
    return user_data

    """
    ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
    """
    users = db.query(User).all()
    user_data = [{"id": user.id, "name": user.name, "role": user.role} for user in users]
    return user_data

@router.put("/users/{user_id}/update-role", response_class=JSONResponse)
def update_user_role(
    user_id: int,
    role_data: dict,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive("employee", "admin"))
):
    new_role = role_data.get("role")
    if not new_role or new_role not in ["customer", "employee"]:
        raise HTTPException(status_code=400, detail="‚ùå Invalid role specified")
    
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="‚ùå User not found")
    
    user.role = new_role
    db.commit()
    return {"message": f"‚úÖ ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {user_id} ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô {new_role}"}

    """
    ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    """
    new_role = role_data.get("role")
    if new_role not in ["admin", "packing staff", "preparation staff"]:
        raise HTTPException(status_code=400, detail="‚ùå Invalid role specified")

    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="‚ùå User not found")

    user.role = "employee"
    user.position = new_role
    db.commit()

    return {"message": f"‚úÖ ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {user_id} ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô {new_role}"}

@router.put("/users/{user_id}/update-position", response_class=JSONResponse)
def update_user_position(
    user_id: int,
    position_data: dict,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive("employee", "admin"))
):
    """
    ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (Position) ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    """
    new_position = position_data.get("position")
    valid_positions = ["admin", "preparation staff", "packing staff"]

    if new_position not in valid_positions:
        raise HTTPException(status_code=400, detail="‚ùå Invalid position specified")

    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="‚ùå User not found")

    user.position = new_position
    db.commit()

    return {"message": f"‚úÖ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {user_id} ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô {new_position}"}


@router.delete("/users/{user_id}", response_class=JSONResponse)
def delete_user(
    user_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive("employee", "admin"))
):
    """
    ‚úÖ ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
    """
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="‚ùå User not found")

    db.delete(user)
    db.commit()
    
    return {"message": f"‚úÖ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {user_id} ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"}


# Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£roles
@router.get("/roles", response_class=HTMLResponse)
def get_order_management(
    request: Request,
    current_user: User = Depends(get_user_with_role_and_position_and_isActive("employee", "admin"))
):
    print(f"üõ°Ô∏è Order Management Access by: {current_user.email}")
    return templates.TemplateResponse("admin_roles.html", {"request": request, "current_user": current_user})

# Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
@router.get("/working-status", response_class=HTMLResponse)
def get_working_logs(
    request: Request,
    current_user: User = Depends(get_user_with_role_and_position_and_isActive("employee", "admin"))
):
    print(f"üõ°Ô∏è Order Management Access by: {current_user.email}")
    return templates.TemplateResponse("admin_logs.html", {"request": request, "current_user": current_user})


@router.get("/pending_order", response_class=JSONResponse)
def get_pending_orders(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive("employee", "admin"))
):
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ pending
    """
    pending_orders = db.query(Order).filter(Order.status == "pending").all()
    
    orders_data = []
    for order in pending_orders:
        try:
            # ‡πÅ‡∏õ‡∏•‡∏á item ‡∏à‡∏≤‡∏Å String ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô JSON
            item_data = json.loads(order.item)
        except json.JSONDecodeError:
            item_data = [{"error": "‚ùå Invalid JSON format"}]
            print(f"‚ùå JSONDecodeError ‡πÉ‡∏ô Order ID: {order.order_id}")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö slip_path
        if order.slip_path:
            normalized_slip_path = order.slip_path.replace("\\", "/")  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç backslash ‡πÄ‡∏õ‡πá‡∏ô slash
            slip_path = f"/{normalized_slip_path}" if not normalized_slip_path.startswith("/") else normalized_slip_path
        else:
            slip_path = None

        orders_data.append({
            "id": order.order_id,
            "email": order.email,
            "item": item_data,
            "total": order.total,
            "status": order.status,
            "created_at": order.created_at.strftime('%Y-%m-%d %H:%M:%S'),
            "slip_path": slip_path  # URL ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        })

    return {"orders": orders_data}

@router.websocket("/notifications")
async def admin_notifications(websocket: WebSocket):
    """
    ‚úÖ WebSocket ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô `pending`
    """
    await websocket.accept()
    admin_connections.append(websocket)

    try:
        while True:
            await websocket.receive_text()  # ‚úÖ ‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Client (‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ)
    except WebSocketDisconnect:
        admin_connections.remove(websocket)  # ‚úÖ ‡∏•‡∏ö Connection ‡∏ñ‡πâ‡∏≤‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏•‡∏∏‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å WebSocket


@router.post("/trigger-notify")
async def trigger_notify(payload: NotifyPayload, request: Request):
    """
    ‚úÖ Endpoint ‡πÉ‡∏´‡πâ Thesis-API ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Home ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Admin ‡∏ú‡πà‡∏≤‡∏ô WebSocket
    """
    message = {
        "order_id": payload.order_id,
        "message": f"‚ö†Ô∏è ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå #{payload.order_id} ‡πÄ‡∏õ‡πá‡∏ô PENDING - {payload.reason}",
    }

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Admin Online ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if not admin_connections:
        return {"status": "no_admin_online"}

    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡πÉ‡∏´‡πâ Admin ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° WebSocket ‡∏≠‡∏¢‡∏π‡πà
    for conn in admin_connections:
        await conn.send_json(message)

    return {"status": "notified", "sent_to": len(admin_connections)}


# Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
@router.put("/orders/{order_id}/approve", response_class=JSONResponse)
def approve_order(
    order_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive("employee", "admin"))
):
    """
    ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô confirmed)
    """
    order = db.query(Order).filter(Order.order_id == order_id).first()
    if not order:
        raise HTTPException(status_code=404, detail="‚ùå Order not found")

    order.status = "confirmed"
    db.commit()
    return {"message": f"‚úÖ Order {order_id} confirmed successfully"}

@router.put("/users/{user_id}/change-role", response_class=JSONResponse)
def change_user_role(
    user_id: int,
    role: str,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive("employee", "admin"))
):
    """
    ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó (Role) ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    """
    valid_roles = ["admin", "packing staff", "preparation staff"]

    if role not in valid_roles:
        raise HTTPException(status_code=400, detail="‚ùå Invalid role specified")

    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="‚ùå User not found")

    user.role = str("employee")
    user.position = role
    user.is_active = False
    db.commit()
    return {"message": f"‚úÖ User {user_id} role updated to {role}"}

# Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
@router.delete("/orders/{order_id}/cancel", response_class=JSONResponse)
def cancel_order(
    order_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive("employee", "admin"))
):
    """
    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
    """
    order = db.query(Order).filter(Order.order_id == order_id).first()
    if not order:
        raise HTTPException(status_code=404, detail="‚ùå Order not found")

    db.delete(order)
    db.commit()
    return {"message": f"‚úÖ Order {order_id} canceled successfully"}

# Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Activate
@router.get("/employees-to-activate", response_class=JSONResponse)
def get_users_to_activate(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive("employee", "admin"))
):
    users = db.query(User).filter(User.is_active == False, User.role == "employee").all()
    return users

@router.get("/customers-to-activate", response_class=JSONResponse)
def get_customers_to_activate(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive("employee", "admin"))
):
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Customer ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà Active
    """
    customers = db.query(User).filter(User.is_active == False, User.role == "customer").all()
    
    customer_data = [
        {
            "id": customer.id,
            "name": customer.name,
            "email": customer.email,
            "role": customer.role
        }
        for customer in customers
    ]
    return {"customers": customer_data}

@router.get("/work-status", response_class=JSONResponse)
def get_work_status(
    date: str,  # ‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏ä‡πà‡∏ô "2024-02-01"
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive("employee", "admin"))
):
    """
    ‚úÖ ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏ï‡πä‡∏∞‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    """
    orders = db.query(Order).filter(and_(
        Order.created_at >= f"{date} 00:00:00",
        Order.created_at <= f"{date} 23:59:59"
    )).all()

    order_data = [
        {
            "order_id": order.order_id,
            "table_number": order.camera.table_number if order.camera else "N/A",
            "employee_name": order.user.name if order.user else "N/A",
            "status": order.status,  # ‡πÄ‡∏ä‡πà‡∏ô pending, packing, completed
            "created_at": order.created_at.strftime("%Y-%m-%d %H:%M:%S")
        }
        for order in orders
    ]
    return {"work_status": order_data}

@router.get("/my-work-status", response_class=JSONResponse)
def get_my_work_status(
    date: str,  # ‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)  # ‡πÉ‡∏´‡πâ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
):
    """
    ‚úÖ ‡πÉ‡∏´‡πâ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô
    """
    try:
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô datetime object ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô
        date_obj = datetime.strptime(date, "%Y-%m-%d")
        start_date = date_obj.replace(hour=0, minute=0, second=0)
        end_date = date_obj.replace(hour=23, minute=59, second=59)

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å assign ‡πÉ‡∏´‡πâ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ
        assigned_camera = db.query(Camera).filter(Camera.assigned_to == current_user.id).first()
        table_number = assigned_camera.table_number if assigned_camera else "N/A"

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• orders ‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
        orders = (
            db.query(Order)
            .filter(
                Order.assigned_to == current_user.id,
                Order.created_at >= start_date,
                Order.created_at <= end_date
            )
            .order_by(Order.created_at.desc())
            .all()
        )

        order_data = []
        for order in orders:
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON string ‡πÄ‡∏õ‡πá‡∏ô dict
            try:
                items = json.loads(order.item) if order.item else {}
                item_count = len(items)
            except json.JSONDecodeError:
                items = {}
                item_count = 0

            order_data.append({
                "order_id": order.order_id,
                "table_number": table_number,  # ‡πÉ‡∏ä‡πâ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å assign
                "status": order.status,
                "created_at": order.created_at.strftime("%Y-%m-%d %H:%M:%S"),
                "total": float(order.total),
                "item_count": item_count,
                "is_verified": order.is_verified
            })

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        completed_orders = sum(1 for order in order_data if order["status"] == "completed")
        total_sales = sum(order["total"] for order in order_data if order["status"] == "completed")

        return {
            "my_work_status": order_data,
            "statistics": {
                "total_orders": len(order_data),
                "completed_orders": completed_orders,
                "completion_rate": f"{(completed_orders/len(order_data)*100):.1f}%" if order_data else "0%",
                "total_sales": total_sales
            },
            "date": date
        }

    except ValueError:
        raise HTTPException(status_code=400, detail="‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

# Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
@router.get("/my-work-history", response_class=HTMLResponse)
def get_my_work_history(
    request: Request,
    current_user: User = Depends(get_current_user)
):
    """
    ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
    """
    return templates.TemplateResponse("my_work_history.html", {"request": request, "current_user": current_user})



# Camera Management Routes
@router.get("/cameras", response_class=HTMLResponse)
async def get_cameras_page(
    request: Request,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive("employee", "admin"))
):
    """‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡πâ‡∏≠‡∏á"""
    cameras = camera_crud.get_cameras(db)
    employees = user_crud.get_users_by_role(db, "employee")  # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    return templates.TemplateResponse(
        "cameras.html",
        {
            "request": request,
            "cameras": cameras,
            "employees": employees
        }
    )

# Camera API Endpoints
@router.get("/api/cameras", response_model=List[CameraSchema])
async def get_cameras(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive("employee", "admin"))
):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    return camera_crud.get_cameras(db)

@router.post("/api/cameras", response_model=CameraSchema)
async def create_camera(
    camera: CameraCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive("employee", "admin"))
):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà"""
    db_camera = camera_crud.create_camera(db, camera)
    if not db_camera:
        raise HTTPException(status_code=400, detail="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
    return db_camera

@router.put("/api/cameras/{camera_id}", response_model=CameraSchema)
async def update_camera(
    camera_id: int,
    camera: CameraUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive("employee", "admin"))
):
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á"""
    db_camera = camera_crud.update_camera(db, camera_id, camera)
    if not db_camera:
        raise HTTPException(status_code=404, detail="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞‡∏ã‡πâ‡∏≥")
    return db_camera

@router.delete("/api/cameras/{camera_id}")
async def delete_camera(
    camera_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_user_with_role_and_position_and_isActive("employee", "admin"))
):
    """‡∏•‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á"""
    if not camera_crud.delete_camera(db, camera_id):
        raise HTTPException(status_code=404, detail="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
    return {"status": "success", "message": "‡∏•‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"}
